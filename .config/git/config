[alias]
    exec = ! "exec"
    versions = tag -l --sort=version:refname
    br = branch -vv
    bra = branch -vv --all
    bed = branch --edit-description
	st = status
    s = status -sb
    au = add -u
    ci = commit -v
    ca = commit --amend -v
    ca = commit -a
    cm = commit -m
    cma = commit -a -m
    br = branch
    co = checkout
    w = whatchanged
    di = diff
    dis = diff --stat
    diw = diff --color-words
    dc = diff --cached
    dcs = diff --cached --stat
    dcw = diff --cached --color-words
    dh = diff HEAD~
    dhs = diff HEAD~ --stat
    dhw = diff HEAD~ --color-words
    du = diff @{u}...
    dus = diff @{u}... --stat
    duw = diff @{u}... --color-words
    save = commit -a -m "Save"
    grp = grep -C 1
    ff = merge --ff-only
    noff = merge --no-ff
    f = fetch --tags --prune
    fa = fetch --all --tags --prune
    lg = log -p
    gr = log --graph --format=line # graph
    grd = log --graph --format=detail # graph detail
    gra = log --graph --format=line --all # graph all
    grad = log --graph --format=detail --all # graph all in detail
    sf = show --format=fuller --show-signature
    sfw = show --format=fuller --color-words
    sfs = show --format=fuller --stat
    l = log --decorate --pretty=format:'%C(auto)%h%C(auto) %C(auto,cyan)(%cd)%Creset %s %C(auto)%d%C(auto) %C(auto,magenta)[%an]%C(auto)' --date='format:%Y-%m-%d %H:%M'
    ll = l --graph --branches --tags
    lll = l --graph --all
    llog = log --date=local
    list = ls-tree -r master --name-only
    who = shortlog -s --
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
    pub = "!f() { git push -u ${1:-origin} $(git symbolic-ref HEAD); }; f"
    pullf = "!sh -c 'git fetch --all; git reset --hard origin/master'"
    up = pull --rebase
    put = push origin HEAD
    pullrb = pull --rebase
    mirror-remote = ! "mr() { git push \"${2}\" \"refs/remotes/${1}/*:refs/heads/*\" && git remote set-head \"${2}\" -a; }; mr"
    count = diff --stat "4b825dc642cb6eb9a060e54bf8d69288fbee4904" # hash of empty tree
    credit = shortlog -sn
    linecredit = ! "lc() { git ls-tree --name-only -z -r HEAD | xargs -0 -n1 git diff --no-index --numstat /dev/null 2>/dev/null | grep -v '^-' | cut -f 3- | cut -d ' ' -f 3- | xargs -n1 git blame --line-porcelain | grep '^author ' | cut -d ' ' -f 2- | sort | uniq -c | sort -nr; }; lc"
    cc = rev-list HEAD --count
    cca = rev-list --all --count
    showtool = ! "st() { if [ -z $1 ]; then c='HEAD'; else c=$1; fi; git difftool $c~..$c; }; st"
    info = ! "inf() { if git rev-parse ${1} >/dev/null 2>&1; then git cat-file -p $(git rev-parse ${1}); else echo Invalid object; fi }; inf"
    cleanall = clean -fdx # this is dangerous, so it's intentionally long to type
    stsh = stash --keep-index
    staash = stash --include-untracked
    update-submodules = submodule update --init --recursive
    upgrade-submodules = submodule update --init --remote
    empty-tree-hash = hash-object -t tree /dev/null
    root = rev-parse --show-toplevel
    ctags = ! "ctg() { trap \"rm -f .git/tags.$$\" EXIT; ctags --tag-relative -Rf.git/tags.$$ --exclude=.git; mv .git/tags.$$ .git/tags; }; ctg"
    tar = ! "tar() { git archive --format tar --prefix=\"${PWD##*/}/\" HEAD -o ${1}; }; tar"
    targz = ! "targz() { git archive --format tar.gz --prefix=\"${PWD##*/}/\" HEAD -o ${1}; }; targz"
    zip = ! "zip() { git archive --format zip --prefix=\"${PWD##*/}/\" HEAD -o ${1}; }; zip"
    # usage: 
    # $ git squash-all -m 'a new start'
    # $ git push -f
    squash-all = "!f(){ git reset $(git commit-tree \"HEAD^{tree}\" \"$@\");};f"
#[core]
#    pager = delta
#[interactive]
#    diffFilter = delta --color-only
#[delta]
#    navigate = true  # use n and N to move between diff sections
#[merge]
#    conflictstyle = zdiff3
[user]
    useConfigOnly = true
[init]
    defaultBranch = master
[diff]
    mnemonicPrefix = true
    wordRegex = "[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+"
    compactionHeuristic = true
[color]
    ui = auto
    diff = auto
    status = auto
[color "grep"]
    match = cyan bold
    selected = blue
    context = normal
    filename = magenta
    linenumber = green
    separator = yellow
    function = blue
[pretty]
    line = "%C(auto)%h %<|(60,trunc)%s %C(green)%ad%C(auto)%d"
    detail = "%C(auto)%h %s%n  %C(yellow)by %C(blue)%an %C(magenta)<%ae> [%G?] %C(green)%ad%n %C(auto)%d%n"
[push]
    default = simple
[grep]
    lineNumber = true
# Allow local customizations in the config.local file
[include]
    path = ~/.config/git/config.local
[includeIf "hasconfig:remote.*.url:git@github.com:*/**"]
    path = ~/.config/git/config.github
